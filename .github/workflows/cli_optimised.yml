name: CBOM Vulnerability Analysis with CLI

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

env:
  CODEQL_VERSION: v2.21.3
  CBOM_TOOL_VERSION: v1.0.0
  CBOM_TOOL_DIR: ${{ github.workspace }}/.cbom-tool
  ANALYSIS_OUTPUT_DIR: ${{ github.workspace }}/analysis-results

jobs:
  cbom-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout Current Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Debug step to understand repository structure
    - name: Debug - Repository Structure
      run: |
        echo "=== Repository Structure Debug ==="
        echo "Current directory: $(pwd)"
        echo "Repository contents:"
        find . -maxdepth 2 -type f | head -20
        echo ""
        echo "Looking for build configuration files:"
        find . -name "configure.ac" -o -name "Makefile.am" -o -name "CMakeLists.txt" -o -name "Makefile" | head -10
        echo ""
        echo "Looking for source files:"
        find . -name "*.c" -o -name "*.h" -o -name "*.cpp" -o -name "*.hpp" | head -10

    # Setup custom package cache directory to avoid permission issues
    - name: Setup Package Cache Directory
      run: |
        mkdir -p $HOME/.apt-cache
        echo "Setting up custom APT cache directory: $HOME/.apt-cache"

    # Cache APT packages with better approach
    - name: Cache APT Packages
      uses: actions/cache@v4
      with:
        path: ~/.apt-cache
        key: ${{ runner.os }}-apt-packages-${{ hashFiles('.github/workflows/*.yml') || 'default' }}
        restore-keys: |
          ${{ runner.os }}-apt-packages-default
          ${{ runner.os }}-apt-packages-

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Install Essential Build Tools
      run: |
        sudo apt-get update -y
        sudo apt-get install -y --no-install-recommends \
          python3-dev python3-venv git curl build-essential

    - name: Install Build Dependencies
      run: |
        sudo apt-get install -y --no-install-recommends \
          build-essential autoconf automake libtool pkg-config cmake \
          clang gcc g++ make \
          libssl-dev zlib1g-dev libnghttp2-dev \
          libpsl-dev libidn2-dev libssh2-1-dev \
          libkrb5-dev librtmp-dev libldap2-dev \
          libgnutls28-dev libcurl4-openssl-dev

    # Cache CodeQL CLI with improved key
    - name: Cache CodeQL CLI
      id: cache-codeql
      uses: actions/cache@v4
      with:
        path: $HOME/codeql-cli
        key: codeql-${{ env.CODEQL_VERSION }}-${{ runner.os }}
        restore-keys: |
          codeql-${{ env.CODEQL_VERSION }}-

    - name: Setup CodeQL CLI
      if: steps.cache-codeql.outputs.cache-hit != 'true'
      run: |
        echo "Setting up CodeQL CLI..."
        mkdir -p $HOME/codeql-cli
        wget -q https://github.com/github/codeql-action/releases/download/codeql-bundle-${{ env.CODEQL_VERSION }}/codeql-bundle-linux64.tar.gz -O codeql-bundle.tar.gz
        tar -xzf codeql-bundle.tar.gz -C $HOME/codeql-cli
        rm codeql-bundle.tar.gz

    - name: Add CodeQL to PATH
      run: |
        CODEQL_PATH=$(find $HOME/codeql-cli -name codeql -type f | head -n 1)
        CODEQL_DIR=$(dirname "$CODEQL_PATH")
        echo "CODEQL_PATH=${CODEQL_PATH}" >> $GITHUB_ENV
        echo "CODEQL_DIR=${CODEQL_DIR}" >> $GITHUB_ENV
        echo "${CODEQL_DIR}" >> $GITHUB_PATH
        echo "CodeQL version:"
        "${CODEQL_PATH}" --version

    # Cache CBOM Tool with simplified key
    - name: Cache CBOM Tool
      id: cache-cbom
      uses: actions/cache@v4
      with:
        path: ${{ env.CBOM_TOOL_DIR }}
        key: cbom-tool-${{ env.CBOM_TOOL_VERSION }}-${{ runner.os }}
        restore-keys: |
          cbom-tool-${{ env.CBOM_TOOL_VERSION }}-
          cbom-tool-

    - name: Clone CBOM Analysis Tool
      if: steps.cache-cbom.outputs.cache-hit != 'true'
      uses: actions/checkout@v4
      with:
        repository: Namokar100/tool
        path: ${{ env.CBOM_TOOL_DIR }}
        token: ${{ secrets.PAT_TOKEN }}

    - name: Install CBOM Tool Dependencies
      if: steps.cache-cbom.outputs.cache-hit != 'true'
      run: |
        cd ${{ env.CBOM_TOOL_DIR }}
        echo "Installing CBOM tool dependencies..."
        python -m pip install --upgrade pip setuptools wheel
        python -m venv venv
        source venv/bin/activate
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        else
          echo "Warning: requirements.txt not found"
        fi
        pip install -e .

    # Cache build artifacts with better file detection
    - name: Cache Build Artifacts
      uses: actions/cache@v4
      with:
        path: |
          configure
          config.status
          Makefile
          **/*.o
          **/*.a
          **/.libs
          build/
        key: ${{ runner.os }}-build-${{ hashFiles('**/*.c', '**/*.h', '**/*.cpp', '**/*.hpp', 'configure.ac', 'Makefile.am') || github.sha }}
        restore-keys: |
          ${{ runner.os }}-build-${{ github.sha }}
          ${{ runner.os }}-build-

    # Cache CodeQL database with better scope
    - name: Cache CodeQL Database
      uses: actions/cache@v4
      with:
        path: |
          codeql-database
          .codeql
        key: codeql-db-${{ runner.os }}-${{ hashFiles('**/*.c', '**/*.h', '**/*.cpp', '**/*.hpp') || github.sha }}
        restore-keys: |
          codeql-db-${{ runner.os }}-${{ github.sha }}
          codeql-db-${{ runner.os }}-

    - name: Create Analysis Directory
      run: |
        mkdir -p ${{ env.ANALYSIS_OUTPUT_DIR }}
        echo "Created analysis output directory: ${{ env.ANALYSIS_OUTPUT_DIR }}"

    # Debug step before running analysis
    - name: Debug - Pre-Analysis Check
      run: |
        echo "=== Pre-Analysis Debug ==="
        echo "CBOM Tool directory contents:"
        ls -la ${{ env.CBOM_TOOL_DIR }} || echo "CBOM Tool directory not found"
        
        if [ -d "${{ env.CBOM_TOOL_DIR }}" ]; then
          echo "CBOM Tool venv status:"
          ls -la ${{ env.CBOM_TOOL_DIR }}/venv || echo "Virtual environment not found"
          
          echo "Checking for CLI script:"
          find ${{ env.CBOM_TOOL_DIR }} -name "*.py" | grep -i cli || echo "CLI script not found"
        fi
        
        echo "Current working directory: $(pwd)"
        echo "Analysis output directory: ${{ env.ANALYSIS_OUTPUT_DIR }}"

    - name: Run CBOM Analysis
      run: |
        cd ${{ env.CBOM_TOOL_DIR }}
        
        # Check if virtual environment exists
        if [ ! -d "venv" ]; then
          echo "Virtual environment not found, creating new one..."
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install -e .
        else
          source venv/bin/activate
        fi
        
        # Get absolute path of repository to analyze
        REPO_PATH="${{ github.workspace }}"
        
        # Use the default rules file
        RULES_PATH="${{ env.CBOM_TOOL_DIR }}/data/default_rules.yaml"
        
        # Check if rules file exists, create default if not
        if [ ! -f "$RULES_PATH" ]; then
          echo "Rules file not found, checking for alternative locations..."
          find ${{ env.CBOM_TOOL_DIR }} -name "*.yaml" -o -name "*.yml" | head -5
          # Use a default rules path or create minimal rules
          RULES_PATH="${{ env.CBOM_TOOL_DIR }}/rules.yaml"
          echo "Using alternative rules path: $RULES_PATH"
        fi
        
        # Use parallel compilation for faster builds
        NPROC=$(nproc)
        echo "Using $NPROC parallel jobs for compilation"
        
        # Find the correct CLI script
        CLI_SCRIPT=$(find ${{ env.CBOM_TOOL_DIR }} -name "*.py" | grep -i cli | head -1)
        if [ -z "$CLI_SCRIPT" ]; then
          echo "CLI script not found, listing Python files:"
          find ${{ env.CBOM_TOOL_DIR }} -name "*.py" | head -10
          # Try common locations
          CLI_SCRIPT="${{ env.CBOM_TOOL_DIR }}/calyptra_ql/cli.py"
          if [ ! -f "$CLI_SCRIPT" ]; then
            CLI_SCRIPT="${{ env.CBOM_TOOL_DIR }}/cli.py"
          fi
          if [ ! -f "$CLI_SCRIPT" ]; then
            CLI_SCRIPT="${{ env.CBOM_TOOL_DIR }}/src/cli.py"
          fi
        fi
        
        echo "Using CLI script: $CLI_SCRIPT"
        
        # Determine build command based on repository structure
        BUILD_CMD=""
        if [ -f "${REPO_PATH}/configure.ac" ] || [ -f "${REPO_PATH}/configure.in" ]; then
          BUILD_CMD="autoreconf -fi && ./configure --with-openssl --disable-dependency-tracking && make -j${NPROC}"
        elif [ -f "${REPO_PATH}/CMakeLists.txt" ]; then
          BUILD_CMD="mkdir -p build && cd build && cmake .. && make -j${NPROC}"
        elif [ -f "${REPO_PATH}/Makefile" ]; then
          BUILD_CMD="make -j${NPROC}"
        else
          echo "No standard build system detected, using generic build command"
          BUILD_CMD="echo 'No build required'"
        fi
        
        echo "Using build command: $BUILD_CMD"
        
        # Run the CLI analysis with error handling
        if [ -f "$CLI_SCRIPT" ]; then
          python "$CLI_SCRIPT" \
            "${REPO_PATH}" \
            --build-command "$BUILD_CMD" \
            -o "${{ env.ANALYSIS_OUTPUT_DIR }}/cbom.json" \
            -c "${{ env.ANALYSIS_OUTPUT_DIR }}/compliance_report.txt" \
            --rules "${RULES_PATH}" \
            -vv || echo "Analysis completed with warnings"
        else
          echo "Error: CLI script not found at $CLI_SCRIPT"
          echo "Creating placeholder results..."
          echo '{"analysis": "failed", "reason": "CLI script not found"}' > "${{ env.ANALYSIS_OUTPUT_DIR }}/cbom.json"
          echo "Analysis failed: CLI script not found" > "${{ env.ANALYSIS_OUTPUT_DIR }}/compliance_report.txt"
        fi

    - name: Debug - Post-Analysis Check
      run: |
        echo "=== Post-Analysis Debug ==="
        echo "Analysis output directory contents:"
        ls -la ${{ env.ANALYSIS_OUTPUT_DIR }}
        
        echo "Checking for output files:"
        if [ -f "${{ env.ANALYSIS_OUTPUT_DIR }}/cbom.json" ]; then
          echo "CBOM JSON file size: $(wc -c < '${{ env.ANALYSIS_OUTPUT_DIR }}/cbom.json') bytes"
        fi
        
        if [ -f "${{ env.ANALYSIS_OUTPUT_DIR }}/compliance_report.txt" ]; then
          echo "Compliance report file size: $(wc -c < '${{ env.ANALYSIS_OUTPUT_DIR }}/compliance_report.txt') bytes"
          echo "First 10 lines of compliance report:"
          head -10 "${{ env.ANALYSIS_OUTPUT_DIR }}/compliance_report.txt"
        fi

    - name: Check for Vulnerabilities
      id: check-vulnerabilities
      run: |
        REPORT_PATH="${{ env.ANALYSIS_OUTPUT_DIR }}/compliance_report.txt"
        
        if [ ! -f "$REPORT_PATH" ]; then
          echo "has_vulnerabilities=false" >> $GITHUB_ENV
          echo "violations_count=0" >> $GITHUB_ENV
          echo "::warning::Compliance report not found"
          exit 0
        fi
        
        # Check if report has content beyond error messages
        if grep -q "Analysis failed\|CLI script not found\|Error:" "$REPORT_PATH"; then
          echo "has_vulnerabilities=false" >> $GITHUB_ENV
          echo "violations_count=0" >> $GITHUB_ENV
          echo "::warning::Analysis failed - check logs"
          exit 0
        fi
        
        # Extract each violation block
        VIOLATION_BLOCKS=$(awk '/^- Rule ID:/ {found=1; print; next} found && NF==0 {found=0; print "---"} found && NF > 0 {print}' "$REPORT_PATH")
        
        # Count violations (based on "- Rule ID:" lines)
        VIOLATIONS_COUNT=$(echo "$VIOLATION_BLOCKS" | grep -c '^- Rule ID:' || echo "0")
        
        if [ "$VIOLATIONS_COUNT" -gt 0 ]; then
          echo "has_vulnerabilities=true" >> $GITHUB_ENV
          echo "violations_count=$VIOLATIONS_COUNT" >> $GITHUB_ENV
          echo "::warning::Found $VIOLATIONS_COUNT security violations"
          
          echo "Violation Details:"
          echo "$VIOLATION_BLOCKS" | awk '
            /^- Rule ID:/ { rule=$0; next }
            /^  Location:/ {
              split($2, pathline, ":");
              file=pathline[1]; line=pathline[2];
              sub(/^- Rule ID: */, "", rule);
              printf "- Rule: %s, File: %s, Line: %s\n", rule, file, line
            }
          '
        else
          echo "has_vulnerabilities=false" >> $GITHUB_ENV
          echo "violations_count=0" >> $GITHUB_ENV
          echo "No security vulnerabilities found"
        fi

    - name: Create Analysis Summary
      run: |
        REPORT_PATH="${{ env.ANALYSIS_OUTPUT_DIR }}/compliance_report.txt"
        
        echo "## CBOM Analysis Results" >> $GITHUB_STEP_SUMMARY
        echo "Analysis completed at: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "### Repository Analyzed" >> $GITHUB_STEP_SUMMARY
        echo "Repository: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "Branch: ${GITHUB_REF#refs/heads/}" >> $GITHUB_STEP_SUMMARY
        echo "Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ ! -f "$REPORT_PATH" ]; then
          echo "### Analysis Status: Failed" >> $GITHUB_STEP_SUMMARY
          echo "Compliance report not found. Check workflow logs for details." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Full Reports" >> $GITHUB_STEP_SUMMARY
          echo "Detailed reports are available in the workflow artifacts:" >> $GITHUB_STEP_SUMMARY
          echo "- CBOM Report (cbom.json)" >> $GITHUB_STEP_SUMMARY
          echo "- Compliance Report (compliance_report.txt)" >> $GITHUB_STEP_SUMMARY
          exit 0
        fi
        
        # Check if analysis failed
        if grep -q "Analysis failed\|CLI script not found\|Error:" "$REPORT_PATH"; then
          echo "### Analysis Status: Failed" >> $GITHUB_STEP_SUMMARY
          echo "Analysis encountered errors. Check the workflow logs and artifacts for details." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Error Summary:**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          head -20 "$REPORT_PATH" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          exit 0
        fi
        
        # Extract total violations count
        VIOLATIONS_COUNT="${{ env.violations_count }}"
        if [ -z "$VIOLATIONS_COUNT" ]; then
          VIOLATIONS_COUNT=0
        fi
        
        echo "### Analysis Status: Completed Successfully" >> $GITHUB_STEP_SUMMARY
        echo "### Security Violations Found" >> $GITHUB_STEP_SUMMARY
        echo "**Total violations found: $VIOLATIONS_COUNT**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "$VIOLATIONS_COUNT" -gt 0 ]; then
          # Parse violations from the text file
          awk '
            BEGIN { 
              violation_count = 0
              in_violation = 0
              high_count = 0; medium_count = 0; low_count = 0
            }
            /^- Rule ID:/ {
              in_violation = 1
              rule_id = $0
              gsub(/^- Rule ID:[[:space:]]*/, "", rule_id)
            }
            in_violation && /^  Description:/ {
              description = $0
              gsub(/^  Description:[[:space:]]*/, "", description)
            }
            in_violation && /^  Location:/ {
              location = $0
              gsub(/^  Location:[[:space:]]*/, "", location)
              split(location, loc_parts, ":")
              file = loc_parts[1]
              line = loc_parts[2]
            }
            in_violation && /^  Finding:/ {
              finding = $0
              gsub(/^  Finding:[[:space:]]*/, "", finding)
            }
            in_violation && /^$/ {
              if (rule_id && description && file && line) {
                violation_count++
                
                # Determine severity based on rule ID or description
                severity = "Medium"
                if (index(description, "DES") > 0) { severity = "High"; high_count++ }
                else if (index(description, "MD5") > 0) { severity = "Medium"; medium_count++ }
                else if (index(description, "SHA1") > 0) { severity = "Medium"; medium_count++ }
                else if (index(description, "RC4") > 0) { severity = "High"; high_count++ }
                else { severity = "Low"; low_count++ }
                
                # Limit output for performance - show only first 10 violations in detail
                if (violation_count <= 10) {
                  print "#### Violation " violation_count " in `" file "` at line " line
                  print "**Rule**: " rule_id
                  print "**Severity**: " severity
                  print "**Description**: " description
                  print ""
                }
              }
              in_violation = 0
              rule_id = ""
              description = ""
              location = ""
              file = ""
              line = ""
              finding = ""
            }
            END {
              if (violation_count > 10) {
                print "... and " (violation_count - 10) " more violations"
                print ""
              }
              print "### Violation Statistics"
              print "**Total violations**: " violation_count
              print ""
              print "**By severity:**"
              if (high_count > 0) print "- High: " high_count
              if (medium_count > 0) print "- Medium: " medium_count
              if (low_count > 0) print "- Low: " low_count
              print ""
            }
          ' "$REPORT_PATH" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ No violations found - Great job!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "### Full Reports" >> $GITHUB_STEP_SUMMARY
        echo "Detailed reports are available in the workflow artifacts:" >> $GITHUB_STEP_SUMMARY
        echo "- CBOM Report (cbom.json)" >> $GITHUB_STEP_SUMMARY
        echo "- Compliance Report (compliance_report.txt)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Job summary generated at $(date)**" >> $GITHUB_STEP_SUMMARY

    # Debug cache status before upload
    - name: Debug - Cache Status
      if: always()
      run: |
        echo "=== Cache Status Debug ==="
        echo "Checking cached directories:"
        
        echo "CodeQL CLI cache:"
        ls -la $HOME/codeql-cli || echo "CodeQL CLI not cached"
        
        echo "CBOM Tool cache:"
        ls -la ${{ env.CBOM_TOOL_DIR }} || echo "CBOM Tool not cached"
        
        echo "Current cache usage:"
        du -sh $HOME/codeql-cli ${{ env.CBOM_TOOL_DIR }} 2>/dev/null || echo "Could not calculate cache sizes"

    - name: Upload Analysis Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cbom-analysis-results-${{ github.sha }}
        path: |
          ${{ env.ANALYSIS_OUTPUT_DIR }}/cbom.json
          ${{ env.ANALYSIS_OUTPUT_DIR }}/compliance_report.txt
        retention-days: 7
        if-no-files-found: warn

    - name: List Caches (Debug)
      if: always()
      continue-on-error: true
      run: |
        echo "=== GitHub Actions Cache List ==="
        gh cache list --limit 20 || echo "Could not list caches (may require different permissions)"
      env:
        GH_TOKEN: ${{ github.token }}

    - name: Fail if Vulnerabilities Found
      if: env.has_vulnerabilities == 'true'
      run: |
        echo "❌ Security vulnerabilities were found in the analysis"
        echo "Check the job summary and artifacts for detailed information"
        exit 1
