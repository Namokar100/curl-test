name: CBOM Vulnerability Analysis

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

env:
  CODEQL_VERSION: v2.21.2
  CODEQL_DIR: ${{ github.workspace }}/codeql
  CBOM_TOOL_DIR: ${{ github.workspace }}/.cbom-tool
  CUSTOM_BUILD_COMMAND: ""  # e.g., "make", "npm run build"

jobs:
  cbom-analysis:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository to Analyze
      uses: actions/checkout@v4
      with:
        path: repo-to-scan

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install Essential Build Tools
      run: |
        sudo apt-get update -y
        sudo apt-get install -y --no-install-recommends \
          build-essential cmake clang gcc g++ make \
          python3-dev python3-venv git curl

    - name: Cache CodeQL CLI
      id: codeql-cache
      uses: actions/cache@v4
      with:
        path: ${{ env.CODEQL_DIR }}
        key: codeql-${{ env.CODEQL_VERSION }}
        restore-keys: |
          codeql-

    - name: Download and set up CodeQL CLI
      if: steps.codeql-cache.outputs.cache-hit != 'true'
      run: |
        mkdir -p ${{ env.CODEQL_DIR }}
        wget https://github.com/github/codeql-cli-binaries/releases/download/${CODEQL_VERSION}/codeql-linux64.zip
        unzip codeql-linux64.zip -d ${{ env.CODEQL_DIR }}
        echo "${{ env.CODEQL_DIR }}/codeql" >> $GITHUB_PATH

    - name: Add CodeQL to PATH
      if: steps.codeql-cache.outputs.cache-hit == 'true'
      run: echo "${{ env.CODEQL_DIR }}/codeql" >> $GITHUB_PATH

    - name: Clone CBOM Analysis Tool
      uses: actions/checkout@v4
      with:
        repository: Namokar100/tool  # Fixed repository format
        path: ${{ env.CBOM_TOOL_DIR }}
        token: ${{ secrets.PAT_TOKEN }}

    - name: Install CBOM Tool Dependencies
      run: |
        cd ${{ env.CBOM_TOOL_DIR }}
        python -m pip install --upgrade pip setuptools wheel
        python -m venv venv
        source venv/bin/activate
        # Install dependencies first
        pip install -r requirements.txt
        # Install the package in development mode
        pip install -e .
        # Create a wrapper script
        echo '#!/bin/bash
        source ${{ env.CBOM_TOOL_DIR }}/venv/bin/activate
        export PYTHONPATH="${PYTHONPATH}:${{ env.CBOM_TOOL_DIR }}"
        python -m calyptra_ql/cli "$@"' > run-analysis.sh
        chmod +x run-analysis.sh
        # Verify installation
        ./venv/bin/python -c "import calyptra_ql; print('Package found at:', calyptra_ql.__file__)"

    - name: Run CBOM Analysis
      id: cbom-analysis
      run: |
        cd ${{ env.CBOM_TOOL_DIR }}
        mkdir -p ../analysis-results
        
        # Run the analysis using the wrapper script
        ./run-analysis.sh "${{ github.workspace }}" \
          --codeql-path "${{ env.CODEQL_DIR }}/codeql" \
          --codeql-threads 4 \
          --output-cbom ../analysis-results/cbom.json \
          --output-compliance ../analysis-results/compliance_report.txt \
          -v

        if [ ! -f ../analysis-results/cbom.json ] || [ ! -f ../analysis-results/compliance_report.txt ]; then
          echo "::error::CBOM analysis failed to produce output files"
          exit 1
        fi

    - name: Check for Vulnerabilities
      id: check-vulnerabilities
      run: |
        if grep -q "violations found" analysis-results/compliance_report.txt; then
          echo "has_vulnerabilities=true" >> $GITHUB_ENV
          echo "::warning::Security vulnerabilities were found in the analysis"
        else
          echo "has_vulnerabilities=false" >> $GITHUB_ENV
          echo "No security vulnerabilities found"
        fi

    - name: Upload Analysis Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cbom-analysis-results
        path: |
          analysis-results/cbom.json
          analysis-results/compliance_report.txt
        retention-days: 7

    - name: Create Analysis Summary
      if: always()
      run: |
        echo "## CBOM Analysis Results" >> $GITHUB_STEP_SUMMARY
        echo "Analysis completed at: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "### Compliance Report" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat analysis-results/compliance_report.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Fail if Vulnerabilities Found
      if: env.has_vulnerabilities == 'true'
      run: |
        echo "Security vulnerabilities were found in the analysis"
        exit 1
