name: CBOM Vulnerability Analysis

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

env:
  CODEQL_VERSION: v2.21.2
  CODEQL_DIR: ${{ github.workspace }}/codeql
  CBOM_TOOL_DIR: ${{ github.workspace }}/.cbom-tool
  CUSTOM_BUILD_COMMAND: ""  # e.g., "make", "npm run build"

jobs:
  cbom-analysis:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository to Analyze
      uses: actions/checkout@v3
      with:
        path: repo-to-scan

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache APT Packages
      id: cache-apt
      uses: actions/cache@v3
      with:
        path: |
          /var/cache/apt/archives
          /var/lib/apt/lists
        key: apt-${{ runner.os }}-${{ hashFiles('.github/workflows/**') }}
        restore-keys: |
          apt-${{ runner.os }}-

    - name: Install Essential Build Tools
      run: |
        sudo apt-get update -y
        sudo apt-get install -y --no-install-recommends \
          build-essential cmake clang gcc g++ make \
          python3-dev python3-venv git curl

    - name: Cache CodeQL CLI
      id: codeql-cache
      uses: actions/cache@v3
      with:
        path: ${{ env.CODEQL_DIR }}
        key: codeql-${{ env.CODEQL_VERSION }}
        restore-keys: |
          codeql-

    - name: Download and set up CodeQL CLI
      if: steps.codeql-cache.outputs.cache-hit != 'true'
      run: |
        mkdir -p ${{ env.CODEQL_DIR }}
        wget https://github.com/github/codeql-cli-binaries/releases/download/${CODEQL_VERSION}/codeql-linux64.zip
        unzip codeql-linux64.zip -d ${{ env.CODEQL_DIR }}
        echo "${{ env.CODEQL_DIR }}/codeql" >> $GITHUB_PATH

    - name: Add CodeQL to PATH
      if: steps.codeql-cache.outputs.cache-hit == 'true'
      run: echo "${{ env.CODEQL_DIR }}/codeql" >> $GITHUB_PATH

    - name: Cache CBOM Tool Repository
      id: cache-cbom-repo
      uses: actions/cache@v3
      with:
        path: ${{ env.CBOM_TOOL_DIR }}
        key: cbom-repo-${{ github.sha }}
        restore-keys: |
          cbom-repo-

    - name: Clone CBOM Analysis Tool
      if: steps.cache-cbom-repo.outputs.cache-hit != 'true'
      uses: actions/checkout@v3
      with:
        repository: https://github.com/Namokar100/tool.git  # Replace with actual repo
        path: ${{ env.CBOM_TOOL_DIR }}
        token: ${{ secrets.GITHUB_TOKEN }}  # Required if private

    - name: Cache Python Dependencies
      id: cache-pip
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ${{ env.CBOM_TOOL_DIR }}/.venv
        key: pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          pip-

    - name: Install CBOM Tool Dependencies
      run: |
        cd ${{ env.CBOM_TOOL_DIR }}
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install .  # Install in development mode

    - name: Run CBOM Analysis
      id: cbom-analysis
      run: |
        mkdir -p analysis-results
        
        # Run the analysis
        python -m calyptra_ql.cli "${{ github.workspace }}" \
          --codeql-path "${{ env.CODEQL_DIR }}/codeql" \
          # --build-command "${CUSTOM_BUILD_COMMAND}" \
          # --overwrite-db \
          # --keep-db \
          --codeql-threads 4 \
          --output-cbom analysis-results/cbom.json \
          --output-compliance analysis-results/compliance_report.txt \
          -v

        # Check if analysis produced results
        if [ ! -f analysis-results/cbom.json ] || [ ! -f analysis-results/compliance_report.txt ]; then
          echo "::error::CBOM analysis failed to produce output files"
          exit 1
        fi

    - name: Check for Vulnerabilities
      id: check-vulnerabilities
      run: |
        if grep -q "violations found" analysis-results/compliance_report.txt; then
          echo "has_vulnerabilities=true" >> $GITHUB_ENV
          echo "::warning::Security vulnerabilities were found in the analysis"
        else
          echo "has_vulnerabilities=false" >> $GITHUB_ENV
          echo "No security vulnerabilities found"
        fi

    - name: Upload Analysis Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: cbom-analysis-results
        path: |
          analysis-results/cbom.json
          analysis-results/compliance_report.txt
        retention-days: 7

    - name: Create Analysis Summary
      if: always()
      run: |
        echo "## CBOM Analysis Results" >> $GITHUB_STEP_SUMMARY
        echo "Analysis completed at: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "### Compliance Report" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat analysis-results/compliance_report.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Fail if Vulnerabilities Found
      if: env.has_vulnerabilities == 'true'
      run: |
        echo "Security vulnerabilities were found in the analysis"
        exit 1
